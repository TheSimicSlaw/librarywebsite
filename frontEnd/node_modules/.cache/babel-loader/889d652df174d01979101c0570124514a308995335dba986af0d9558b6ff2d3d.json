{"ast":null,"code":"// import React, { useState } from 'react';\n// import { Link, useNavigate } from 'react-router-dom';\n// import './signIn.css'; // Make sure the CSS file is correctly linked\n// function SignInPage() {\n//   const [StudentID, setStudentID] = useState('');\n//   const [ContactNumber, setContactNumber] = useState('');\n//   const [errorMessage, setErrorMessage] = useState('');\n//   const navigate = useNavigate();\n//   const handleSignIn = async (e) => {\n//     e.preventDefault();\n//     if (!StudentID || !ContactNumber) {\n//       setErrorMessage('Please enter both Student ID and password');\n//       return;\n//     }\n//     try {\n//       const response = await fetch('/api/authenticate', {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify({ StudentID, ContactNumber }),\n//       });\n//       if (!response.ok) {\n//         throw new Error('Authentication failed');\n//       }\n//       navigate('/studentHomePage');\n//     } catch (error) {\n//       console.error('Error:', error);\n//       setErrorMessage('Failed to authenticate. Please check your Student ID and password.');\n//     }\n//     // Reset the form fields\n//     setStudentID('');\n//     setContactNumber('');\n//   };\n//   return (\n//     <div className=\"signInWrapper\">\n//       <h1 className=\"header\">Student Login</h1>\n//       <div className=\"signInContainer\">\n//         <h2 className=\"title\">Sign In</h2>\n//         {errorMessage && <p className=\"error\">{errorMessage}</p>}\n//         <form onSubmit={handleSignIn} className=\"signInForm\">\n//           <div className=\"inputGroup\">\n//             <label className=\"inFormText\" htmlFor=\"StudentID\">Usernam</label>\n//             <input\n//               type=\"text\"\n//               id=\"StudentID\"\n//               value={StudentID}\n//               onChange={(e) => setStudentID(e.target.value)}\n//             />\n//           </div>\n//           <div className=\"inputGroup\">\n//             <label className=\"inFormText\" htmlFor=\"ContactNumber\">Password</label>\n//             <input\n//               type=\"password\"\n//               id=\"ContactNumber\"\n//               value={ContactNumber}\n//               onChange={(e) => setContactNumber(e.target.value)}\n//             />\n//           </div>\n//           <button type=\"submit\" className=\"signIn\">Sign In</button>\n//           <Link to=\"/profSignIn\" className=\"profSignIn\">Professor Sign in</Link>\n//           <Link to=\"/libSignIn\" className=\"libSignIn\">Librarian Sign in</Link>\n//           <Link to=\"/adminSignIn\" className=\"adminSignIn\">Admin Sign in</Link>\n//         </form>\n//       </div>\n//     </div>\n//   );\n// }\n// export default SignInPage;\nimport React,{useState}from'react';import{Link,useNavigate}from'react-router-dom';import'./signIn.css';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function SignInPage(){const[StudentID,setStudentID]=useState('');const[ContactNumber,setContactNumber]=useState('');const[errorMessage,setErrorMessage]=useState('');const navigate=useNavigate();const handleSignIn=async e=>{e.preventDefault();if(!StudentID||!ContactNumber){setErrorMessage('Please enter both Student ID and password');return;}// Dummy username-password pairs\nconst dummyUsers={user1:'password1',user2:'password2',user3:'password3'};// Check if the provided username exists in the dummy users\nif(dummyUsers.hasOwnProperty(StudentID)){// Check if the provided password matches the stored password\nif(ContactNumber===dummyUsers[StudentID]){// Passwords match, authentication successful\nnavigate('/studenthomepage');return;}}// If username or password is incorrect, show error message\nsetErrorMessage('Invalid username or password');// Reset the form fields\nsetStudentID('');setContactNumber('');};return/*#__PURE__*/_jsxs(\"div\",{className:\"signInWrapper\",children:[/*#__PURE__*/_jsx(\"h1\",{className:\"header\",children:\"Student Login\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"signInContainer\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"title\",children:\"Sign In\"}),errorMessage&&/*#__PURE__*/_jsx(\"p\",{className:\"error\",children:errorMessage}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSignIn,className:\"signInForm\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"inputGroup\",children:[/*#__PURE__*/_jsx(\"label\",{className:\"inFormText\",htmlFor:\"StudentID\",children:\"Username\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",id:\"StudentID\",value:StudentID,onChange:e=>setStudentID(e.target.value)})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"inputGroup\",children:[/*#__PURE__*/_jsx(\"label\",{className:\"inFormText\",htmlFor:\"ContactNumber\",children:\"Password\"}),/*#__PURE__*/_jsx(\"input\",{type:\"password\",id:\"ContactNumber\",value:ContactNumber,onChange:e=>setContactNumber(e.target.value)})]}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",className:\"signIn\",children:\"Sign In\"}),/*#__PURE__*/_jsx(Link,{to:\"/profSignIn\",className:\"profSignIn\",children:\"Professor Sign in\"}),/*#__PURE__*/_jsx(Link,{to:\"/libSignIn\",className:\"libSignIn\",children:\"Librarian Sign in\"}),/*#__PURE__*/_jsx(Link,{to:\"/adminSignIn\",className:\"adminSignIn\",children:\"Admin Sign in\"})]})]})]});}export default SignInPage;","map":{"version":3,"names":["React","useState","Link","useNavigate","jsx","_jsx","jsxs","_jsxs","SignInPage","StudentID","setStudentID","ContactNumber","setContactNumber","errorMessage","setErrorMessage","navigate","handleSignIn","e","preventDefault","dummyUsers","user1","user2","user3","hasOwnProperty","className","children","onSubmit","htmlFor","type","id","value","onChange","target","to"],"sources":["C:/Users/ryana/OneDrive/School 2023-2024/Spring Semester/COSC 3380 Database Systems/librarywebsite/frontEnd/src/SignInPage.js"],"sourcesContent":["// import React, { useState } from 'react';\n// import { Link, useNavigate } from 'react-router-dom';\n// import './signIn.css'; // Make sure the CSS file is correctly linked\n\n// function SignInPage() {\n//   const [StudentID, setStudentID] = useState('');\n//   const [ContactNumber, setContactNumber] = useState('');\n//   const [errorMessage, setErrorMessage] = useState('');\n//   const navigate = useNavigate();\n\n//   const handleSignIn = async (e) => {\n//     e.preventDefault();\n\n//     if (!StudentID || !ContactNumber) {\n//       setErrorMessage('Please enter both Student ID and password');\n//       return;\n//     }\n\n//     try {\n//       const response = await fetch('/api/authenticate', {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify({ StudentID, ContactNumber }),\n//       });\n\n//       if (!response.ok) {\n//         throw new Error('Authentication failed');\n//       }\n\n//       navigate('/studentHomePage');\n//     } catch (error) {\n//       console.error('Error:', error);\n//       setErrorMessage('Failed to authenticate. Please check your Student ID and password.');\n//     }\n\n//     // Reset the form fields\n//     setStudentID('');\n//     setContactNumber('');\n//   };\n\n//   return (\n//     <div className=\"signInWrapper\">\n//       <h1 className=\"header\">Student Login</h1>\n//       <div className=\"signInContainer\">\n//         <h2 className=\"title\">Sign In</h2>\n//         {errorMessage && <p className=\"error\">{errorMessage}</p>}\n//         <form onSubmit={handleSignIn} className=\"signInForm\">\n//           <div className=\"inputGroup\">\n//             <label className=\"inFormText\" htmlFor=\"StudentID\">Usernam</label>\n//             <input\n//               type=\"text\"\n//               id=\"StudentID\"\n//               value={StudentID}\n//               onChange={(e) => setStudentID(e.target.value)}\n//             />\n//           </div>\n//           <div className=\"inputGroup\">\n//             <label className=\"inFormText\" htmlFor=\"ContactNumber\">Password</label>\n//             <input\n//               type=\"password\"\n//               id=\"ContactNumber\"\n//               value={ContactNumber}\n//               onChange={(e) => setContactNumber(e.target.value)}\n//             />\n//           </div>\n//           <button type=\"submit\" className=\"signIn\">Sign In</button>\n//           <Link to=\"/profSignIn\" className=\"profSignIn\">Professor Sign in</Link>\n//           <Link to=\"/libSignIn\" className=\"libSignIn\">Librarian Sign in</Link>\n//           <Link to=\"/adminSignIn\" className=\"adminSignIn\">Admin Sign in</Link>\n//         </form>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default SignInPage;\n\n\nimport React, { useState } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport './signIn.css'; \n\nfunction SignInPage() {\n  const [StudentID, setStudentID] = useState('');\n  const [ContactNumber, setContactNumber] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n  const navigate = useNavigate();\n\n  const handleSignIn = async (e) => {\n    e.preventDefault();\n\n    if (!StudentID || !ContactNumber) {\n      setErrorMessage('Please enter both Student ID and password');\n      return;\n    }\n\n    // Dummy username-password pairs\n    const dummyUsers = {\n      user1: 'password1',\n      user2: 'password2',\n      user3: 'password3'\n    };\n\n    // Check if the provided username exists in the dummy users\n    if (dummyUsers.hasOwnProperty(StudentID)) {\n      // Check if the provided password matches the stored password\n      if (ContactNumber === dummyUsers[StudentID]) {\n        // Passwords match, authentication successful\n        navigate('/studenthomepage');\n        return;\n      }\n    }\n\n    // If username or password is incorrect, show error message\n    setErrorMessage('Invalid username or password');\n\n    // Reset the form fields\n    setStudentID('');\n    setContactNumber('');\n  };\n\n  return (\n    <div className=\"signInWrapper\">\n      <h1 className=\"header\">Student Login</h1>\n      <div className=\"signInContainer\">\n        <h2 className=\"title\">Sign In</h2>\n        {errorMessage && <p className=\"error\">{errorMessage}</p>}\n        <form onSubmit={handleSignIn} className=\"signInForm\">\n          <div className=\"inputGroup\">\n            <label className=\"inFormText\" htmlFor=\"StudentID\">Username</label>\n            <input\n              type=\"text\"\n              id=\"StudentID\"\n              value={StudentID}\n              onChange={(e) => setStudentID(e.target.value)}\n            />\n          </div>\n          <div className=\"inputGroup\">\n            <label className=\"inFormText\" htmlFor=\"ContactNumber\">Password</label>\n            <input\n              type=\"password\"\n              id=\"ContactNumber\"\n              value={ContactNumber}\n              onChange={(e) => setContactNumber(e.target.value)}\n            />\n          </div>\n          <button type=\"submit\" className=\"signIn\">Sign In</button>\n          <Link to=\"/profSignIn\" className=\"profSignIn\">Professor Sign in</Link>\n          <Link to=\"/libSignIn\" className=\"libSignIn\">Librarian Sign in</Link>\n          <Link to=\"/adminSignIn\" className=\"adminSignIn\">Admin Sign in</Link>\n        </form>\n      </div>\n    </div>\n  );\n}\n\nexport default SignInPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}